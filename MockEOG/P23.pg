DOCUMENT();

loadMacros(
"PGstandard.pl",
"PGchoicemacros.pl",
#"PGunion.pl",
"parserRadioButtons.pl",
"parserPopUp.pl",
"compoundProblem5.pl",
"compoundProblem.pl",
"contextLimitedNumeric.pl",
"parserImplicitEquation.pl",
"parserMultiAnswer.pl",
"contextPercent.pl",
"contextCurrency.pl",
"niceTables.pl",
"contextFraction.pl",
"contextLimitedPolynomial.pl"
);

$isProfessor = ($studentLogin eq 'dpvc' || $studentLogin eq 'professor');

$mc1 = RadioButtons(
    [
      "\( x > -13 \)",
      "\( x < -13 \)",
      "\( x > -15 \)",
      "\( x < -15 \)",
    ],
    "\( x < -15 \)",
    labels => "ABC" );

$eqn_or_ineq = "inequality";
$ineq = ">";
sub iop {
  my $op = $_[0];
  my %inverses = ( 'multiply by' => 'divide by',
                'divide by' => 'multiply by',
                'add' => 'subtract',
                'subtract' => 'add' );
  my $re=join("|",keys %inverses);
  (my $iop = $op) =~ s/($re)/$inverses{$1}/g;
  return($iop);
}
$step1f = "multiply by -3";
$step2f = "subtract 42";
$step1i = iop($step2f);
$step2i = iop($step1f);
$variable_side = "the left hand side";
$popup1 = PopUp(["?", "the left hand side", "the right hand side"], $variable_side);
$popup2 = PopUp(["?", "$step1f, then $step2f", "$step2f, then $step1f"], "$step1f, then $step2f");
$popup3 = PopUp(["?", "$step1f, then $step2f", "$step2f, then $step1f", "$step1i, then $step2i", "$step2i, then $step1i"], "$step1i, then $step2i");
$popup4 = PopUp(["?", "do the same operation to the other side of the $eqn_or_ineq", "do the opposite operation to the other side of the $eqn_or_ineq"], "do the same operation to the other side of the $eqn_or_ineq");
$popup5 = PopUp(["?", "get the variable by itself on one side of the $eqn_or_ineq", "get zero on one side of the $eqn_or_ineq", "get one on one side of the $eqn_or_ineq"], "get the variable by itself on one side of the $eqn_or_ineq");
$popup6 = PopUp(["?", "the left side", "the right side", "both sides"], "both sides");
$popup7 = PopUp(["?", "get the variable by itself on $variable_side", "get zero on $variable_side", "get one on $variable_side"], "get the variable by itself on $variable_side");
$popup8 = PopUp(["?", ">", "<"], ">");
$popup9 = PopUp(["?", ">", "<"], "<");
$popup10 = PopUp(["?", "right", "left"], "right");
$popup11 = PopUp(["?", "includes", "does not include"], "does not include");

Context("Numeric");
#Context("LimitedFraction");
Context()->flags->set(reduceConstants=>0);
Context()->variables->add(y=>"Real");
Context("LimitedPolynomial-Strict");
#Context()->variables->add(y=>"Real");
$lhs0 = Compute("-3x-42");
$rhs0 = Compute("3");

$lhs1 = Compute("-3x");
$rhs1 = Compute("45");

$lhs2 = Compute("x");
$rhs2 = Compute("-15");
$ans = $rhs2;

$ans_hash1 = $mc1->cmp()->evaluate(
    $inputs_ref->{ANS_NUM_TO_NAME(1)} );


BEGIN_TEXT
23. What is the value of the inequality \(-3x - 42 > 3\)?

$PAR
\{ $mc1->buttons() \}

END_TEXT

ANS( $mc1->cmp() );

$ans_hash = $mc1->cmp()->evaluate(
    $inputs_ref->{ANS_NUM_TO_NAME(1)} );



$ansNum = 1;


$scaffold = Scaffold();
INITIALIZE_SCAFFOLD('$scaffold');
TEXT(beginproblem());


##############
#  Section
##############
$ansNum += 8;
$section += 1;
@requireCorrect = @nextRequireCorrect;
@nextRequireCorrect = 2..$ansNum;

Context()->texStrings;
DISPLAY_SECTION( { name=>"$section: Devise a plan",
             #canshow=>1, #always true
             canshow=>$scaffold->requireCorrect(@requireCorrect),
             iscorrect=>$scaffold->requireCorrect(@nextRequireCorrect),
             section=>$section #designates that this is the first section
},   <<'END_SECTION');

$PAR
To obtain a valid $eqn_or_ineq, when we do an operation to one side of an $eqn_or_ineq, we must also
\{SECTION_ANS($popup4->cmp), $popup4->menu() \}.
$PAR
To solve an $eqn_or_ineq, we must choose operations that will
\{SECTION_ANS($popup5->cmp), $popup5->menu() \}.

$PAR
Which side of the $eqn_or_ineq \( $lhs0 $ineq $rhs0 \) contains the variable?
\{SECTION_ANS($popup1->cmp), $popup1->menu() \}
$PAR
What is the order of operations on that side of the $eqn_or_ineq?
\{SECTION_ANS($popup2->cmp), $popup2->menu() \}
$PAR
The inverse operations in the reverse order are
\{SECTION_ANS($popup3->cmp), $popup3->menu() \}.
$PAR
Doing the above operations to both sides of the $eqn_or_ineq will \{SECTION_ANS($popup7->cmp), $popup7->menu() \}.

$PAR
Therefore, our plan to solve the $eqn_or_ineq is:
\{SECTION_ANS($popup3->cmp), $popup3->menu() \} on \{SECTION_ANS($popup6->cmp), $popup6->menu() \} of the $eqn_or_ineq.


END_SECTION

##############
#  Section
##############
$ansNum += 3;
$section += 1;
@requireCorrect = @nextRequireCorrect;
@nextRequireCorrect = 2..$ansNum;

Context()->texStrings;
DISPLAY_SECTION( { name=>"$section: Carry out the first step of the plan",
             #canshow=>1, #always true
             canshow=>$scaffold->requireCorrect(@requireCorrect),
             iscorrect=>$scaffold->requireCorrect(@nextRequireCorrect),
             section=>$section #designates that this is the first section
},   <<'END_SECTION');

Carry out the first step of the plan: $step1i to both sides of the $eqn_or_ineq.
$PAR
\( $lhs0 $ineq $rhs0 \)
$PAR
\{SECTION_ANS($lhs1->cmp),$lhs1->ans_rule()\} \{SECTION_ANS($popup8->cmp), $popup8->menu() \} \{SECTION_ANS($rhs1->cmp),$rhs1->ans_rule()\}
$PAR

END_SECTION
##############
#  Section
##############
$ansNum += 3;
$section += 1;
@requireCorrect = @nextRequireCorrect;
@nextRequireCorrect = 2..$ansNum;

Context()->texStrings;
DISPLAY_SECTION( { name=>"$section: Carry out the second step of the plan",
             #canshow=>1, #always true
             canshow=>$scaffold->requireCorrect(@requireCorrect),
             iscorrect=>$scaffold->requireCorrect(@nextRequireCorrect),
             section=>$section #designates that this is the first section
},   <<'END_SECTION');

Carry out the second step of the plan: $step2i to both sides of the $eqn_or_ineq.
$PAR
\( $lhs1 $ineq $rhs1 \)
$PAR
\{SECTION_ANS($lhs2->cmp),$lhs2->ans_rule()\}  \{SECTION_ANS($popup9->cmp), $popup9->menu() \}  \{SECTION_ANS($rhs2->cmp),$rhs2->ans_rule()\}
$PAR

END_SECTION


PROCESS_ANSWERS();

$last_correct_section = PROCESS_SECTIONS();

$opensection = $last_correct_section + 1;
$scaffold->openSections(1..$opensection);


ENDDOCUMENT();
