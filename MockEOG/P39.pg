DOCUMENT();

loadMacros(
"PGstandard.pl",
#"PGunion.pl",
"parserRadioButtons.pl",
"parserPopUp.pl",
"compoundProblem5.pl",
"compoundProblem.pl",
"contextLimitedNumeric.pl",
"parserImplicitEquation.pl",
"parserMultiAnswer.pl",
"contextPercent.pl",
"contextCurrency.pl",
"niceTables.pl",
"contextFraction.pl",
"contextLimitedPolynomial.pl"
);

$isProfessor = ($studentLogin eq 'dpvc' || $studentLogin eq 'professor');

#$cp = new compoundProblem(
#  parts => 2,                  # the total number of parts in this problem
#  totalAnswers => 3,           # total answers in all parts combined
#  parserValues => 1,           # make parser objects from student answers
#  allowReset => $isProfessor,  # professors get Reset button for testing
#);
#Context("Currency");
$mc1 = RadioButtons(
    [ 
      "\{ image( 'img/P39a.png', width=>298, height=>48 ) \}",
      "\{ image( 'img/P39b.png', width=>298, height=>48 ) \}",
      "\{ image( 'img/P39c.png', width=>298, height=>48 ) \}",
      "\{ image( 'img/P39d.png', width=>298, height=>48 ) \}",
    ],
      "\{ image( 'img/P39b.png', width=>298, height=>48 ) \}",
    labels => "ABC" );

$ans_hash1 = $mc1->cmp()->evaluate(
    $inputs_ref->{ANS_NUM_TO_NAME(1)} );

$eqn_or_ineq = "inequality";
#sub iop {
#  my $op = $_[0];
#  my %inverses = ( 'multiply by' => 'divide by',
#                'divide by' => 'multiply by',
#                'add' => 'subtract',
#                'subtract' => 'add' );
#  my $re=join("|",keys %inverses);
#  (my $iop = $op) =~ s/($re)/$inverses{$1}/g;
#  return($iop);
#}
$step1f = "multiply by -1";
$step2f = "add 12";
#$step1i = iop($step2f);
#$step2i = iop($step1f);
$step1i = $step2f;
$step2i = $step1f;
$variable_side = "the left hand side";
$popup1 = PopUp(["?", "the left hand side", "the right hand side"], $variable_side);
$popup2 = PopUp(["?", "$step1f, then $step2f", "$step2f, then $step1f"], "$step1f, then $step2f");
$popup3 = PopUp(["?", "$step1f, then $step2f", "$step2f, then $step1f", "$step1i, then $step2i", "$step2i, then $step1i"], "$step1i, then $step2i");
$popup4 = PopUp(["?", "do the same operation to the other side of the equation", "do the opposite operation to the other side of the equation"], "do the same operation to the other side of the equation");
$popup5 = PopUp(["?", "get the variable by itself on one side of the equation", "get zero on one side of the equation", "get one on one side of the equation"], "get the variable by itself on one side of the equation");
$popup6 = PopUp(["?", "the left side", "the right side", "both sides"], "both sides");
$popup7 = PopUp(["?", "get the variable by itself on $variable_side", "get zero on $variable_side", "get one on $variable_side"], "get the variable by itself on $variable_side");
$popup8 = PopUp(["?", ">", "<"], "<");
$popup9 = PopUp(["?", ">", "<"], ">");

Context("Numeric");
#Context("LimitedFraction");
Context()->flags->set(reduceConstants=>0);
Context()->variables->add(y=>"Real");
Context("LimitedPolynomial-Strict");
#Context()->variables->add(y=>"Real");
$lhs0 = Compute("12-x");
$lhs_term2 = Compute("-x");
$rhs0 = Compute("8");

$lhs1 = Compute("-x");
$rhs1 = Compute("-4");

$lhs2 = Compute("x");
$rhs2 = Compute("4");
$ans = $lhs3;

BEGIN_TEXT
Which choice is a graph of the solution set for \( $lhs0 < $rhs0\)?
$PAR
$BR
\{ $mc1->buttons() \}


END_TEXT

ANS( $mc1->cmp() );

$ans_hash = $mc1->cmp()->evaluate(
    $inputs_ref->{ANS_NUM_TO_NAME(1)} );

#if ($ans_hash->{student_ans} ne '' && $ans_hash->{score} == 0) {
#  $cp->incrementPart();
#}

#$part = $cp->part();


$ansNum = 1;

#if ($part == 2) {

#BEGIN_TEXT
#$PAR
#${BBOLD}The answer that you entered was incorrect. The following sections will guide you through the solution.$EBOLD
#
#END_TEXT

$scaffold = Scaffold();
INITIALIZE_SCAFFOLD('$scaffold');
TEXT(beginproblem());

$section = 0;
##############
#  Section
##############
$ansNum += 1;
$section += 1;
@nextRequireCorrect = 2..$ansNum;

Context()->texStrings;
DISPLAY_SECTION( { name=>"$section: Understand the operations",
             canshow=>1, #always true
             #canshow=>$scaffold->requireCorrect(@requireCorrect),
             iscorrect=>$scaffold->requireCorrect(@nextRequireCorrect),
             section=>$section #designates that this is the first section
},   <<'END_SECTION');

Rewrite the subtraction operation on the $variable_side of the equation as an equivalent addition operation:
$PAR
\( 12 + \) \{SECTION_ANS($lhs_term2->cmp),$lhs_term2->ans_rule() \( < $rhs0 \)\}


END_SECTION

##############
#  Section
##############
$ansNum += 8;
$section += 1;
@requireCorrect = @nextRequireCorrect;
@nextRequireCorrect = 2..$ansNum;

Context()->texStrings;
DISPLAY_SECTION( { name=>"$section: Devise a plan",
             #canshow=>1, #always true
             canshow=>$scaffold->requireCorrect(@requireCorrect),
             iscorrect=>$scaffold->requireCorrect(@nextRequireCorrect),
             section=>$section #designates that this is the first section
},   <<'END_SECTION');

$PAR
To obtain a valid $eqn_or_ineq, when we do an operation to one side of an $eqn_or_ineq, we must also
\{SECTION_ANS($popup4->cmp), $popup4->menu() \}.
$PAR
To solve an $eqn_or_ineq, we must choose operations that will
\{SECTION_ANS($popup5->cmp), $popup5->menu() \}.

$PAR
Which side of the $eqn_or_ineq \( $lhs1 = $rhs1 \) contains the variable?
\{SECTION_ANS($popup1->cmp), $popup1->menu() \}
$PAR
What is the order of operations on that side of the $eqn_or_ineq?
\{SECTION_ANS($popup2->cmp), $popup2->menu() \}
$PAR
The inverse operations in the reverse order are
\{SECTION_ANS($popup3->cmp), $popup3->menu() \}.
$PAR
Doing the above operations to both sides of the $eqn_or_ineq will \{SECTION_ANS($popup7->cmp), $popup7->menu() \}.

$PAR
Therefore, our plan to solve the $eqn_or_ineq is:
\{SECTION_ANS($popup3->cmp), $popup3->menu() \} on \{SECTION_ANS($popup6->cmp), $popup6->menu() \} of the $eqn_or_ineq.


END_SECTION
#########################
# Responsive text logic
#########################
#$ansNum += 2;

#$text1 = $expand_text;
#if ($expanded1->cmp()->evaluate($inputs_ref->{ANS_NUM_TO_NAME($ansNum)})->{score} == 1 && $expanded2->cmp()->evaluate($inputs_ref->{ANS_NUM_TO_NAME($ansNum+1)})->{score} == 1) {
#  $text1 .= $replace_paren_text;
#  $ansNum += 2;
#  #if ($expanded1->cmp()->evaluate($inputs_ref->{ANS_NUM_TO_NAME($ansNum)})->{score} == 1 && $expanded2->cmp()->evaluate($inputs_ref->{ANS_NUM_TO_NAME($ansNum+1)})->{score} == 1) {
#  #}
#} else {
#  $text1 .= "$PAR At least one expanded expression was incorrect.";
#  $text1 .= $inputs_ref->{ANS_NUM_TO_NAME($ansNum)};
#  $text1 .= $inputs_ref->{ANS_NUM_TO_NAME($ansNum+1)};
#  $ansNum += 2;
#  if($inputs_ref->{ANS_NUM_TO_NAME($ansNum)} and $inputs_ref->{ANS_NUM_TO_NAME($ansNum+1)}) {
#    $text1 .= $terms1_text;
#    if ($term11->cmp()->evaluate($inputs_ref->{ANS_NUM_TO_NAME($ansNum)})->{score} == 1 && $term12->cmp()->evaluate($inputs_ref->{ANS_NUM_TO_NAME($ansNum+1)})->{score} == 1) {
#      $text1 .= $terms1_to_expand_text;
#    }
#    $text1 .= $terms2_text;
#    if ($term21->cmp()->evaluate($inputs_ref->{ANS_NUM_TO_NAME($ansNum+2)})->{score} == 1 && $term22->cmp()->evaluate($inputs_ref->{ANS_NUM_TO_NAME($ansNum+3)})->{score} == 1) {
#      $text1 .= $terms2_to_expand_text;
#    }
#  }
#  if ($term11->cmp()->evaluate($inputs_ref->{ANS_NUM_TO_NAME($ansNum)})->{score} == 1 && $term12->cmp()->evaluate($inputs_ref->{ANS_NUM_TO_NAME($ansNum+1)})->{score} == 1 &&
#  $term21->cmp()->evaluate($inputs_ref->{ANS_NUM_TO_NAME($ansNum+2)})->{score} == 1 && $term22->cmp()->evaluate($inputs_ref->{ANS_NUM_TO_NAME($ansNum+3)})->{score} == 1) {
#    $text1 .= $expand_text;
#    $ansNum += 4;
#    if ($expanded1->cmp()->evaluate($inputs_ref->{ANS_NUM_TO_NAME($ansNum)})->{score} == 1 && $expanded2->cmp()->evaluate($inputs_ref->{ANS_NUM_TO_NAME($ansNum+1)})->{score} == 1) {
#      $text1 .= $replace_paren_text;
#      $ansNum += 2;
#      #if ($expanded1->cmp()->evaluate($inputs_ref->{ANS_NUM_TO_NAME($ansNum)})->{score} == 1 && $expanded2->cmp()->evaluate($inputs_ref->{ANS_NUM_TO_NAME($ansNum+1)})->{score} == 1) {
#        #$ansNum += 1;
#        #$text .= $final_eval_text;
#      #}
#    }
#  }
#}


##############
#  Section
##############
$ansNum += 3;
$section += 1;
@requireCorrect = @nextRequireCorrect;
@nextRequireCorrect = 2..$ansNum;

Context()->texStrings;
DISPLAY_SECTION( { name=>"$section: Carry out the first step of the plan",
             #canshow=>1, #always true
             canshow=>$scaffold->requireCorrect(@requireCorrect),
             iscorrect=>$scaffold->requireCorrect(@nextRequireCorrect),
             section=>$section #designates that this is the first section
},   <<'END_SECTION');

Carry out the first step of the plan: $step1 to both sides of the equation.
$PAR
\( $lhs1 = $rhs1 \)
$PAR
\{SECTION_ANS($lhs2->cmp),$lhs2->ans_rule()\} \{SECTION_ANS($popup8->cmp), $popup8->menu() \} \{SECTION_ANS($rhs2->cmp),$rhs2->ans_rule()\}
$PAR

END_SECTION
##############
#  Section
##############
$ansNum += 3;
$section += 1;
@requireCorrect = @nextRequireCorrect;
@nextRequireCorrect = 2..$ansNum;

Context()->texStrings;
DISPLAY_SECTION( { name=>"$section: Carry out the second step of the plan",
             #canshow=>1, #always true
             canshow=>$scaffold->requireCorrect(@requireCorrect),
             iscorrect=>$scaffold->requireCorrect(@nextRequireCorrect),
             section=>$section #designates that this is the first section
},   <<'END_SECTION');

Carry out the second step of the plan: $step2 to both sides of the equation.
$PAR
\( $lhs2 < $rhs2 \)
$PAR
\{SECTION_ANS($lhs3->cmp),$lhs3->ans_rule()\}  \{SECTION_ANS($popup9->cmp), $popup9->menu() \}  \{SECTION_ANS($rhs3->cmp),$rhs3->ans_rule()\}
$PAR

END_SECTION


PROCESS_ANSWERS();

$last_correct_section = PROCESS_SECTIONS();

$opensection = $last_correct_section + 1;
$scaffold->openSections(1..$opensection);


#}
ENDDOCUMENT();
